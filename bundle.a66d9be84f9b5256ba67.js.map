{"version":3,"file":"bundle.a66d9be84f9b5256ba67.js","mappings":"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","sources":["webpack://spotify-bpm/./src/url.ts","webpack://spotify-bpm/./src/authorization.ts","webpack://spotify-bpm/./src/index.ts"],"sourcesContent":["export function generateURLWithSearchParams(\n  url: string,\n  params: { [index: string]: string }\n): string {\n  const urlObject = new URL(url);\n  urlObject.search = new URLSearchParams(params).toString();\n  return urlObject.toString();\n}\n","import { generateURLWithSearchParams } from \"./url\";\n\nconst CLIENT_ID = \"41c67233bcd94457a9d0cecaf0e36aae\";\ndeclare var REDIRECT_URI: string;\n\nfunction generateRandomString(length: Number): string {\n  let possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let text = \"\";\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n\nasync function generateCodeChallenge(code_verifier: string): Promise<string> {\n  const digest = await crypto.subtle.digest(\n    \"SHA-256\",\n    new TextEncoder().encode(code_verifier)\n  );\n  return btoa(String.fromCharCode(...new Uint8Array(digest)))\n    .replace(/=/g, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n}\n\nexport function getAuthorizationCodeFromURL(): string | undefined {\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlSearchParams.entries());\n  if (params.state != localStorage.getItem(\"authorization_state\")) {\n    return undefined;\n  }\n  return params.code;\n}\n\nfunction redirectToSpotifyAuthorizationEndpoint() {\n  const authorization_state = generateRandomString(64);\n  localStorage.setItem(\"authorization_state\", authorization_state);\n  const code_verifier = generateRandomString(64);\n  localStorage.setItem(\"code_verifier\", code_verifier);\n  generateCodeChallenge(code_verifier).then((code_challenge) => {\n    localStorage.setItem(\"code_challenge\", code_challenge);\n    const url = generateURLWithSearchParams(\n      \"https://accounts.spotify.com/authorize\",\n      {\n        client_id: CLIENT_ID,\n        scope: \"user-read-currently-playing\",\n        show_dialog: \"true\",\n        redirect_uri: REDIRECT_URI,\n        state: authorization_state,\n        response_type: \"code\",\n        code_challenge_method: \"S256\",\n        code_challenge: code_challenge,\n      }\n    );\n    window.open(url, \"_self\");\n  });\n}\n\nasync function requestAccessToken(\n  authorization_code: string\n): Promise<string | null> {\n  const code_verifier = localStorage.getItem(\"code_verifier\");\n  if (!code_verifier) {\n    return null;\n  }\n  const response = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    },\n    body: new URLSearchParams({\n      client_id: CLIENT_ID,\n      grant_type: \"authorization_code\",\n      code: authorization_code,\n      redirect_uri: REDIRECT_URI,\n      code_verifier: code_verifier,\n    }),\n  });\n  return response.json().then((data) => {\n    return data.access_token;\n  });\n}\n\nexport function authorize(): Promise<string | null> | null {\n  const access_token = localStorage.getItem(\"access_token\");\n  if (access_token) {\n    return Promise.resolve(access_token);\n  }\n  const authorization_code = getAuthorizationCodeFromURL();\n  if (authorization_code) {\n    history.replaceState({}, document.title, location.pathname);\n    return requestAccessToken(authorization_code).then((access_token) => {\n      if (!access_token) {\n        return null;\n      }\n      localStorage.setItem(\"access_token\", access_token);\n      return access_token;\n    });\n  } else {\n    redirectToSpotifyAuthorizationEndpoint();\n    return null;\n  }\n}\n","import \"./style.css\";\nimport { authorize } from \"./authorization\";\nimport { generateURLWithSearchParams } from \"./url\";\n\nasync function makeSpotifyApiRequest(\n  endpoint: string,\n  method: \"GET\" | \"POST\",\n  access_token: string,\n  search_params: { [index: string]: string } = {}\n): Promise<any> {\n  const url = generateURLWithSearchParams(\n    \"https://api.spotify.com/v1/\" + endpoint,\n    search_params\n  );\n  const response = await fetch(url, {\n    method: method,\n    headers: {\n      Authorization: \"Bearer \" + access_token,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  });\n  if (response.status == 401) {\n    throw Error(\"401\");\n  }\n\n  if (response.status == 204) {\n    return null;\n  }\n  return response.json();\n}\n\ninterface Track {\n  id: string;\n  name: string;\n  artists: string[];\n  tempo: number;\n}\n\nasync function getCurrentlyPlayingTrack(\n  access_token: string\n): Promise<Track | null> {\n  const track_response = await makeSpotifyApiRequest(\n    \"me/player/currently-playing\",\n    \"GET\",\n    access_token\n  );\n  if (!track_response) {\n    return null;\n  }\n  const audio_features_response = await makeSpotifyApiRequest(\n    \"audio-features\",\n    \"GET\",\n    access_token,\n    { ids: track_response.item.id }\n  );\n  return {\n    id: track_response.item.id,\n    name: track_response.item.name,\n    artists: track_response.item.artists.map((artist: any) => artist.name),\n    tempo: audio_features_response.audio_features[0].tempo,\n  };\n}\n\nfunction updateHTML(track: Track | null): void {\n  const container = document.getElementById(\"container\")!;\n  if (track) {\n    container.innerHTML = `\n      <div id=\"tempo\">\n        <span id=\"tempo-value\">${Math.round(track.tempo)}</span>\n        <span id=\"tempo-unit\">BPM</span>\n      </div>\n      <div id=\"song\">${track.name}</div>\n      <div id=\"artists\">${track.artists.join(\", \")}</div>\n    `;\n  } else {\n    container.innerHTML = `<div id=\"song\">No track is playing</div>`;\n  }\n}\n\nfunction update(access_token: string): void {\n  getCurrentlyPlayingTrack(access_token)\n    .then(updateHTML)\n    .catch((error: Error) => {\n      if (error.message == \"401\") {\n        authorize();\n        return;\n      }\n      throw error;\n    });\n}\n\nfunction startIntervalWithPause(func: () => any, time_ms: number): void {\n  func();\n  let interval = setInterval(func, time_ms);\n  document.addEventListener(\"visibilitychange\", function () {\n    if (document.hidden) {\n      clearInterval(interval);\n    } else {\n      interval = setInterval(func, time_ms);\n    }\n  });\n}\n\nfunction signOut() {\n  localStorage.clear();\n  location.reload();\n}\n\nfunction main() {\n  authorize()?.then((access_token) => {\n    if (access_token) {\n      startIntervalWithPause(() => update(access_token), 1000);\n    }\n  });\n  document.getElementById(\"sign-out\")!.onclick = signOut;\n}\n\nmain();\n"],"names":["generateURLWithSearchParams","url","params","urlObject","URL","search","URLSearchParams","toString","CLIENT_ID","generateRandomString","length","possible","text","i","charAt","Math","floor","random","authorize","access_token","localStorage","getItem","Promise","resolve","authorization_code","urlSearchParams","window","location","Object","fromEntries","entries","state","code","getAuthorizationCodeFromURL","history","replaceState","document","title","pathname","async","code_verifier","fetch","method","headers","body","client_id","grant_type","redirect_uri","json","then","data","requestAccessToken","setItem","authorization_state","digest","crypto","subtle","TextEncoder","encode","btoa","String","fromCharCode","Uint8Array","replace","generateCodeChallenge","code_challenge","scope","show_dialog","response_type","code_challenge_method","open","redirectToSpotifyAuthorizationEndpoint","makeSpotifyApiRequest","endpoint","search_params","response","Authorization","Accept","status","Error","updateHTML","track","getElementById","innerHTML","round","tempo","name","artists","join","func","time_ms","interval","setInterval","addEventListener","hidden","clearInterval","startIntervalWithPause","track_response","audio_features_response","ids","item","id","map","artist","audio_features","getCurrentlyPlayingTrack","catch","error","message","update","onclick","clear","reload"],"sourceRoot":""}