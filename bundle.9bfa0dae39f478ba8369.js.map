{"version":3,"file":"bundle.9bfa0dae39f478ba8369.js","mappings":"mBAwBA,SAASA,IACP,IAAIC,EApBN,SAA8BC,GAC5B,IAAIC,EACF,iEACEC,EAAO,GACX,IAAK,IAAIC,EAAI,EAAGA,EAgBiB,GAhBLA,IAC1BD,GAAQD,EAASG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,EAASD,SAE9D,OAAOE,EAaKM,GACZ,MAAMC,EAAS,IAAIC,gBACnBD,EAAOE,OAAO,YAzBE,oCA0BhBF,EAAOE,OAAO,QAAS,+BACvBF,EAAOE,OAAO,cAAe,QAC7BF,EAAOE,OAAO,eAAgB,wCAC9BF,EAAOE,OAAO,gBAAiB,SAC/BF,EAAOE,OAAO,QAASZ,GAEvBa,aAAaC,QAAQ,sBAAuBd,GAE5C,MAAMe,EAAM,0CAA4CL,EAAOM,WAC/DC,OAAOC,KAAKH,EAAK,SAGnBI,eAAeC,EACbC,EACAC,EACAC,EACAC,EAAmD,MAEnD,IAAIT,EAAM,8BAAgCM,EAC1C,GAAIG,EAAc,CAChB,MAAMC,EAAgB,IAAId,gBAC1B,IAAK,MAAOe,EAAKC,KAAUC,OAAOC,QAAQL,GACxCC,EAAcb,OAAOc,EAAKC,GAE5BZ,GAAO,IAAMU,EAAcT,WAE7B,MAAMc,QAAiBC,MAAMhB,EAAK,CAChCO,OAAQA,EACRU,QAAS,CACPC,cAAe,UAAYV,EAC3B,eAAgB,mBAChBW,OAAQ,sBAGZ,GAAuB,KAAnBJ,EAASK,OACX,MAAMC,MAAM,OAGd,OAAuB,KAAnBN,EAASK,OACJ,KAEFL,EAASO,OAmClB,SAASC,EAAWC,GAClB,IAAKA,EAKH,OAJAC,SAASC,eAAe,eAAgBC,UAAY,GACpDF,SAASC,eAAe,cAAeC,UAAY,GACnDF,SAASC,eAAe,QAASC,UAAY,2BAC7CF,SAASC,eAAe,WAAYC,UAAY,IAGlDF,SAASC,eAAe,eAAgBC,UAAYpC,KAAKC,MACvDgC,EAAMI,OACN3B,WACFwB,SAASC,eAAe,cAAeC,UAAY,MACnDF,SAASC,eAAe,QAASC,UAAYH,EAAMK,KACnDJ,SAASC,eAAe,WAAYC,UAAYH,EAAMM,QAAQC,KAAK,OA0BrE,WACE,MAAMvB,EAjIR,WACE,MAAMwB,EAAkB,IAAIpC,gBAAgBM,OAAO+B,SAASC,KAAKC,MAAM,IACjExC,EAASkB,OAAOuB,YAAYJ,EAAgBlB,WAClD,GAAInB,EAAOV,OAASa,aAAauC,QAAQ,uBAGzC,OAAO1C,EAAOa,aA2HO8B,GAChB9B,EAbP,SAAgC+B,EAAiBC,GAC/C,IAAIC,EAAWC,YAAYH,EAgBwB,KAfnDd,SAASkB,iBAAiB,oBAAoB,WACxClB,SAASmB,OACXC,cAAcJ,GAEdA,EAAWC,YAAYH,EAWwB,QAAnDO,EAAuB,IA7BzB,SAAgBtC,IAzChBJ,eACEI,GAEA,MAAMuC,QAAuB1C,EAC3B,8BACA,MACAG,GAEF,IAAKuC,EACH,OAAO,KAET,MAAMC,QAAgC3C,EACpC,iBACA,MACAG,EACA,CAAEyC,IAAKF,EAAeG,KAAKC,KAE7B,MAAO,CACLA,GAAIJ,EAAeG,KAAKC,GACxBtB,KAAMkB,EAAeG,KAAKrB,KAC1BC,QAASiB,EAAeG,KAAKpB,QAAQsB,KAAKC,GAAgBA,EAAOxB,OACjED,MAAOoB,EAAwBM,eAAe,GAAG1B,QAqBnD2B,CAAyB/C,GACtBgD,KAAKjC,GACLkC,OAAOC,IACN,GAAqB,OAAjBA,EAAMC,QAIV,MAAMD,EAHJ1E,OAwBuB4E,CAAOpD,KAHlCxB,IAMJ6E,I","sources":["webpack://spotify-bpm/./src/index.ts"],"sourcesContent":["import \"./style.css\";\n\nconst CLIENT_ID = \"41c67233bcd94457a9d0cecaf0e36aae\";\ndeclare var REDIRECT_URI: string;\n\nfunction generateRandomString(length: Number): string {\n  let possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let text = \"\";\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n\nfunction getAccesTokenFromURL(): string | undefined {\n  const urlSearchParams = new URLSearchParams(window.location.hash.slice(1));\n  const params = Object.fromEntries(urlSearchParams.entries());\n  if (params.state != localStorage.getItem(\"authorization_state\")) {\n    return undefined;\n  }\n  return params.access_token;\n}\n\nfunction authorize() {\n  let state = generateRandomString(16);\n  const params = new URLSearchParams();\n  params.append(\"client_id\", CLIENT_ID);\n  params.append(\"scope\", \"user-read-currently-playing\");\n  params.append(\"show_dialog\", \"true\");\n  params.append(\"redirect_uri\", REDIRECT_URI);\n  params.append(\"response_type\", \"token\");\n  params.append(\"state\", state);\n\n  localStorage.setItem(\"authorization_state\", state);\n\n  const url = \"https://accounts.spotify.com/authorize?\" + params.toString();\n  window.open(url, \"_self\");\n}\n\nasync function makeSpotifyApiRequest(\n  endpoint: string,\n  method: \"GET\" | \"POST\",\n  access_token: string,\n  query_params: { [index: string]: string } | null = null\n): Promise<any> {\n  let url = \"https://api.spotify.com/v1/\" + endpoint;\n  if (query_params) {\n    const search_params = new URLSearchParams();\n    for (const [key, value] of Object.entries(query_params)) {\n      search_params.append(key, value);\n    }\n    url += \"?\" + search_params.toString();\n  }\n  const response = await fetch(url, {\n    method: method,\n    headers: {\n      Authorization: \"Bearer \" + access_token,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  });\n  if (response.status == 401) {\n    throw Error(\"401\");\n  }\n\n  if (response.status == 204) {\n    return null;\n  }\n  return response.json();\n}\n\ninterface Track {\n  id: string;\n  name: string;\n  artists: string[];\n  tempo: number;\n}\n\nasync function getCurrentlyPlayingTrack(\n  access_token: string\n): Promise<Track | null> {\n  const track_response = await makeSpotifyApiRequest(\n    \"me/player/currently-playing\",\n    \"GET\",\n    access_token\n  );\n  if (!track_response) {\n    return null;\n  }\n  const audio_features_response = await makeSpotifyApiRequest(\n    \"audio-features\",\n    \"GET\",\n    access_token,\n    { ids: track_response.item.id }\n  );\n  return {\n    id: track_response.item.id,\n    name: track_response.item.name,\n    artists: track_response.item.artists.map((artist: any) => artist.name),\n    tempo: audio_features_response.audio_features[0].tempo,\n  };\n}\n\nfunction updateHTML(track: Track | null): void {\n  if (!track) {\n    document.getElementById(\"tempo-value\")!.innerHTML = \"\";\n    document.getElementById(\"tempo-unit\")!.innerHTML = \"\";\n    document.getElementById(\"song\")!.innerHTML = \"No track is playing\";\n    document.getElementById(\"artists\")!.innerHTML = \"\";\n    return;\n  }\n  document.getElementById(\"tempo-value\")!.innerHTML = Math.floor(\n    track.tempo\n  ).toString();\n  document.getElementById(\"tempo-unit\")!.innerHTML = \"BPM\";\n  document.getElementById(\"song\")!.innerHTML = track.name;\n  document.getElementById(\"artists\")!.innerHTML = track.artists.join(\", \");\n}\n\nfunction update(access_token: string): void {\n  getCurrentlyPlayingTrack(access_token)\n    .then(updateHTML)\n    .catch((error: Error) => {\n      if (error.message == \"401\") {\n        authorize();\n        return;\n      }\n      throw error;\n    });\n}\n\nfunction startIntervalWithPause(func: () => any, time_ms: number): void {\n  let interval = setInterval(func, time_ms);\n  document.addEventListener(\"visibilitychange\", function () {\n    if (document.hidden) {\n      clearInterval(interval);\n    } else {\n      interval = setInterval(func, time_ms);\n    }\n  });\n}\n\nfunction main() {\n  const access_token = getAccesTokenFromURL();\n  if (!access_token) {\n    authorize();\n    return;\n  }\n  startIntervalWithPause(() => update(access_token), 1000);\n}\n\nmain();\n"],"names":["authorize","state","length","possible","text","i","charAt","Math","floor","random","generateRandomString","params","URLSearchParams","append","localStorage","setItem","url","toString","window","open","async","makeSpotifyApiRequest","endpoint","method","access_token","query_params","search_params","key","value","Object","entries","response","fetch","headers","Authorization","Accept","status","Error","json","updateHTML","track","document","getElementById","innerHTML","tempo","name","artists","join","urlSearchParams","location","hash","slice","fromEntries","getItem","getAccesTokenFromURL","func","time_ms","interval","setInterval","addEventListener","hidden","clearInterval","startIntervalWithPause","track_response","audio_features_response","ids","item","id","map","artist","audio_features","getCurrentlyPlayingTrack","then","catch","error","message","update","main"],"sourceRoot":""}